<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>bear</title>
  
  <subtitle>做一个快乐风男</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://bear01github.io/"/>
  <updated>2019-05-05T12:00:17.648Z</updated>
  <id>http://bear01github.io/</id>
  
  <author>
    <name>sir_bear</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>windows解锁网易云音乐部分音乐变灰歌曲</title>
    <link href="http://bear01github.io/2019/05/05/windows%E8%A7%A3%E9%94%81%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E9%83%A8%E5%88%86%E9%9F%B3%E4%B9%90%E5%8F%98%E7%81%B0%E6%AD%8C%E6%9B%B2/"/>
    <id>http://bear01github.io/2019/05/05/windows解锁网易云音乐部分音乐变灰歌曲/</id>
    <published>2019-05-05T11:21:32.244Z</published>
    <updated>2019-05-05T12:00:17.648Z</updated>
    
    <content type="html"><![CDATA[<p>看到GitHub上有人做了<a href="https://github.com/nondanee/UnblockNeteaseMusic/blob/master/README.md" target="_blank" rel="noopener">这个项目</a>，可以成功播放网易云那些变灰歌曲。自己亲自测试了一下，的确可以实现。简单说一下步骤吧</p><p><img src="https://img-blog.csdnimg.cn/20190505193039839.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTIyOTU0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>第一步：</strong></p><p>确保你安装了nodejs，可以cmd终端查看是否安装</p><p><img src="https://img-blog.csdnimg.cn/20190505193213224.png" alt="在这里插入图片描述"></p><p>如果没有安装，请点击链接<a href="http://nodejs.cn/download/" target="_blank" rel="noopener">下载</a>并安装，安装过程很简单。</p><p><strong>第二步：</strong></p><p><a href="https://github.com/nondanee/UnblockNeteaseMusic" target="_blank" rel="noopener">下载GitHub文件</a>，将项目文件解压到任何盘都可以。</p><p><img src="https://img-blog.csdnimg.cn/20190505193345966.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTIyOTU0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>第三步：</strong></p><p>打开网易云客户端进入到设置里面，设置如下即可，记得点击确定</p><p><img src="https://img-blog.csdnimg.cn/20190503215233119.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTIyOTU0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>第四步：</strong></p><p>打开解压出来的文件，如果安装了git，可在文件下直接鼠标右键打开git终端，输入  node app.js</p><p><img src="https://img-blog.csdnimg.cn/20190503214122174.png" alt="在这里插入图片描述"></p><p>如果没有安装git,在该项目文件的搜索框中输入cmd确定，会弹出cmd终端，可以直接cd到当前目录，然后输入node app.js</p><p><img src="https://img-blog.csdnimg.cn/20190503214428617.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTIyOTU0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190503214702702.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTIyOTU0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>然后打开网易云，会发现所有灰色歌曲都可以正常播放了，是不是很简单，感兴趣的朋友可以试试。</p><p><img src="https://img-blog.csdnimg.cn/20190505193651674.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTIyOTU0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>其他音乐客户端步骤应该相同，只是修改客户端的http代理为本地127.0.0.1，端口8080即可。</p><blockquote><p>温馨提示，该方法只能在本地运行，也就是必须在项目运行情况下才能实现，如果关闭项目了，客户端会无法播放所有音乐，因为我们使用了HTTP代理，这时我们需要将设置里面的http代理关掉。然后就恢复正常了，但这时就又不能播放灰色音乐了。</p></blockquote>]]></content>
    
    <summary type="html">
    
      方法简单，可以一试
    
    </summary>
    
    
      <category term="学习" scheme="http://bear01github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>日记本---2019</title>
    <link href="http://bear01github.io/2019/01/01/2019%E6%97%A5%E5%B8%B8%E9%9A%8F%E7%AC%94/"/>
    <id>http://bear01github.io/2019/01/01/2019日常随笔/</id>
    <published>2018-12-31T16:00:00.000Z</published>
    <updated>2019-04-23T12:57:56.516Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>日有所记，记有所得，得有所悟，悟有所思  ————-bear</p></blockquote><a id="more"></a><h3 id="2019-4-23"><a href="#2019-4-23" class="headerlink" title="2019.4.23"></a>2019.4.23</h3><p>研究方向，研究方向，现在是真的一点方向都没有，完全不知道自己要研究什么。</p><h3 id="2019-4-4"><a href="#2019-4-4" class="headerlink" title="2019.4.4"></a>2019.4.4</h3><p>最近在学tensorflow，从入门到放弃</p><h3 id="2019-3-21"><a href="#2019-3-21" class="headerlink" title="2019.3.21"></a>2019.3.21</h3><p>这几天突发奇想，写了一个小项目，感觉挺实用，等有时间分享出来。</p><h3 id="2019-3-9"><a href="#2019-3-9" class="headerlink" title="2019.3.9"></a>2019.3.9</h3><p>南山植物园半日游，和室友一起，那里的花很美，还有很多好看的汉服小姐姐，更美。</p><h3 id="2019-02-26"><a href="#2019-02-26" class="headerlink" title="2019.02.26"></a>2019.02.26</h3><p>今天拿到新手机了，开心!但是六级没过，难过!也真难过~</p><h3 id="2019-02-20"><a href="#2019-02-20" class="headerlink" title="2019.02.20"></a>2019.02.20</h3><p>又来到了熟悉的实验室，搞事情了</p><h3 id="2019-01-25"><a href="#2019-01-25" class="headerlink" title="2019.01.25"></a>2019.01.25</h3><p>这学期结束了，明天收拾回家</p><h3 id="2019-01-23"><a href="#2019-01-23" class="headerlink" title="2019.01.23"></a>2019.01.23</h3><p>考试结束几天了，成绩也基本都出来了，想说一句，逃课逃到最后一无所有</p><h3 id="2019-01-18"><a href="#2019-01-18" class="headerlink" title="2019.01.18"></a>2019.01.18</h3><p>今天实验室聚餐，给大师姐送行</p><h3 id="2019-01-17"><a href="#2019-01-17" class="headerlink" title="2019.01.17"></a>2019.01.17</h3><p>今天的考试还算比较满意吧，考完就出来打篮球了，我怕是有篮球瘾了</p><h3 id="2019-01-01"><a href="#2019-01-01" class="headerlink" title="2019.01.01"></a>2019.01.01</h3><p>余生有你</p><blockquote><p>2019新的一年，新的开始，记录美好生活</p></blockquote>]]></content>
    
    <summary type="html">
    
      记录生活点滴
    
    </summary>
    
    
      <category term="记录生活" scheme="http://bear01github.io/tags/%E8%AE%B0%E5%BD%95%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>谈谈2018年</title>
    <link href="http://bear01github.io/2018/12/31/2018%E6%80%BB%E7%BB%93/"/>
    <id>http://bear01github.io/2018/12/31/2018总结/</id>
    <published>2018-12-30T16:00:00.000Z</published>
    <updated>2019-01-25T12:50:32.720Z</updated>
    
    <content type="html"><![CDATA[<p>2017奋斗的一年，终于在2018年里看到了成果，考研成功就是我2018年里最大的收获，也许我真的是个幸运儿，每次在绝望的处境下，总会看到希望，明明认为没有希望的考研，最后却成功的考上了，初中考高中，高中考大学，一路过来，我都是一个幸运儿。考研没有改变我的人身，却改变了我的人生。</p><p>2018年年初，也是春节前几天，考研初试成绩出来了，看到成绩有点不敢相信。缓过来过后就开始忙着复试，当时复试压力也不小，还好顶住了，最后也就顺利收到录取通知书。<br>上半年也是本科毕业的最后一学期，大家都在忙着毕业设计的事情。由于之前忙着考研的事，没太多时间去忙毕业设计的事，所以，我只做了个网站，很简单的一个网站，现在我都不好意思拿出来展示了！不过还好顺利毕业了！我的本科生涯就圆满结束了。在长师，那里有我忘不了的回忆，忘不掉的成长和经历，也有忘不了的人和事。<br>2018年暑假，导师给我安排了一个实习的机会，去重庆地理中心实习，所以本科毕业我就去了公司，在外面住了一个不到10平方的房子，准确来说是只有6个平方，想想那个暑假还真是挺艰辛的，公司刚好要做一个大项目，所以一去公司就开始加班，实行996制度，这是我的第一份工作，开始还有些不适应，后面习惯了就还好。我从七月份开始实习，到11月结束，后面三个月因为学校开学了，就一边上课，一边上班，两头跑，因为实在是不方便，学校离公司又比较远，逃课也被点名，后面辞职了。五个月的实习学到了很多，不光是编程能力，专业知识，还有一些其他的社会经验，工作经验。认识了一些工作好几年的大佬，也指点了我许多有用的东西。当然这几个月的实习，也解决了我这一学期的所有开销。</p><p>在暑假期间，除了实习，我还有两份兼职工作，分别给两个考研机构辅导专业课，一对一网络授课，这也是我第一次给别人上课。当时因为公司996制度，所以只能在周日的时候给别人辅导，在那个几平方的小房子里，没有多余的空间，上课只能坐在床上，早上三个小时，下午三个小时。备考也能每天晚上下班回来准备，所幸两个机构上课时间错开了，不然真忙不过来。这次兼职也是很有意义的一份工作，都是和我的专业相关，并且因为这次兼职，这学期的《高级计算机网络体系结构》这门课程，最后的期末考试也很轻松。那段时间是我目前为止，最辛苦，最忙碌的几个月。但这也是一种成长吧，人生的一次不平凡的经历。</p><p>研究生生涯的第一学期，说实话，没学到什么。除了完成相关课程，还真没干其他的事。相反，这学期，打篮球，玩游戏的时间倒是挺多。我把这学期当作一个过渡，一开始也并没有打算在第一学期就投入大量精力和时间去搞学术，科研。</p><p>2018—不平凡的一年，这一年里，发生了太多事，经历了很多，也学到了很多，懂的了很多。有些事，我会尽量去忘记，有些事，我会铭记在心。</p><p>2019希望也是多姿多彩的一年，希望能实现自己定下的小目标。</p>]]></content>
    
    <summary type="html">
    
      过去的2018年
    
    </summary>
    
    
      <category term="随笔" scheme="http://bear01github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github环境搭建</title>
    <link href="http://bear01github.io/2018/12/20/hexo%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://bear01github.io/2018/12/20/hexo环境搭建/</id>
    <published>2018-12-20T04:02:31.032Z</published>
    <updated>2018-12-20T06:22:59.976Z</updated>
    
    <content type="html"><![CDATA[<p>在这里简单介绍一下我们如何来搭建一个hexo博客，其实很简单，按照下面的步骤，几分钟就可以搞完。写这个一是为了方便自己随时搭建环境，二是为了分享给大家，希望对大家有所帮助</p><h3 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h3><ol><li><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">git下载</a></li><li><a href="http://nodejs.cn/download/" target="_blank" rel="noopener">node.js下载</a></li></ol><h3 id="git安装"><a href="#git安装" class="headerlink" title="git安装"></a>git安装</h3><p>和常用软件安装一样，傻瓜式安装，安装路径最好默认c盘，然后一直点next就行。安装完成后，右键菜单会出现git bush ,选择就可以进入git终端</p><h3 id="node-js安装"><a href="#node-js安装" class="headerlink" title="node.js安装"></a>node.js安装</h3><p>也是傻瓜式安装，一路next</p><p>打开git bush 验证安装是否正确</p><p><code>node -v</code><br><code>npm -v</code></p><p>Hexo基于Node.js环境，Node.js是一个Javascript运行环境(runtime) 。node.js自带了<a href="https://www.npmjs.cn/" target="_blank" rel="noopener">npm</a>,这里就不在讲述npm的安装</p><h3 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h3><p>安装好Node.js环境后，就可以通过node的npm包管理工具安装Hexo，打开git bush 执行以下指令(当然npm可以换成cnpm，但要配置<a href="https://npm.taobao.org/" target="_blank" rel="noopener">淘宝加速</a>) </p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br><span class="line">   </span><br><span class="line">   &apos;&apos;&apos;</span><br></pre></td></tr></table></figure><p>成功安装Hexo后，在自己的工作目录下，创建一个blog目录，在此目录下管理自己的博客源码，进入blog目录，执行以下指令完成Hexo项目环境 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>hexo初始化会在blog目录生成一些东西 ,这里我不介绍生成的这些文件</p><p>安装依赖包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>这里我们的本地环境就基本搭建完成</p><p>生成hexo博客</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g // 生成静态页面</span><br><span class="line">hexo s // 启动本地服务</span><br></pre></td></tr></table></figure><p>打开浏览器，输入 <a href="https://link.jianshu.com/?t=http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> ，看到以下页面说明hexo环境安装成功。 </p><p><img src="C:\Users\bear\Desktop\blog\source\assets\hexo.png" alt=""></p><h3 id="hexo部署到github"><a href="#hexo部署到github" class="headerlink" title="hexo部署到github"></a>hexo部署到github</h3><p>上面我们只能在本地进行浏览，别人无法看到你的博客，如果自己没有服务器，那我们可以将博客部署到<a href="https://github.com/" target="_blank" rel="noopener">github</a>，github有免费的存储空间</p><h4 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h4><p>首先需要注册一个github账号，登录github后点击create a new repository,如图完成仓库创建</p><p><img src="C:\Users\bear\Desktop\blog\source\assets\create repository.png" alt=""></p><p>这个仓库是用来存放你的hexo静态页面的，相对于服务器</p><h4 id="部署公钥"><a href="#部署公钥" class="headerlink" title="部署公钥"></a>部署公钥</h4><p>Hexo部署时，采用git协议，为避免暴露账户密码，最好使用证书认证，所以我们需要在Github部署公钥 </p><p>进入账号的<code>Personal setting</code>页面，选择<code>SSH and GPG keys</code>，进入密钥配置页面。填入本机公钥，点击<code>Add SSH key</code> </p><p><a href="https://www.cnblogs.com/yehui-mmd/p/5962254.html" target="_blank" rel="noopener">如何生成本机公钥</a></p><h4 id="发布站点"><a href="#发布站点" class="headerlink" title="发布站点"></a>发布站点</h4><p>首先，打开blog目录下的<code>_config.yml</code>，找到deploy段，配置成这样 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:yourname/yourname.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>注意将代码里面的yourname换成你github账号的username。 </p><p>设置git身份信息，避免每次部署都需要身份验证</p><p>打开git bush </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;你的github用户名&quot;</span><br><span class="line">git config --global user.email &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure><p>最后我们就可以部署hexo了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>等待一会，浏览器打开 <a href="https://link.jianshu.com/?t=https://yourname.github.io" target="_blank" rel="noopener">https://yourname.github.io</a> 就可以看到刚才本地预览页面。 </p><p>我们也可以给博客网站搞一个域名，其实很简单，首先你必须有一个域名，没有的话，自己买一个。</p><p>有了域名后，进入域名控制台，在解析里面添加一条CNAME记录，指向<code>yourname.github.io</code>即可。</p><p><img src="C:\Users\bear\Desktop\blog\source\assets\yuming.png" alt=""> 到blog/source目录下创建一个CNAME文件（不要后缀名），打开文件添加你要绑定的域名保存。重新部署即可</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以上的内容就是我自己在部署hexo博客的时候进行的步骤，当然，新手在开始搭建博客的时候肯定会出现很多问题，不过，有问题是很正常的，也是值得庆幸的，因为你在解决这个问题的过程中，你会发现你懂得越来越多。相反，如果你照着别人给的步骤完美的完成了博客搭建，其实很多步骤，你根本不知道是如何实现的。多动手，解决问题后总有那么一点成就感的。</p>]]></content>
    
    <summary type="html">
    
      如何创建一个hexo博客
    
    </summary>
    
    
      <category term="学习" scheme="http://bear01github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>个人必备</title>
    <link href="http://bear01github.io/2018/12/20/%E5%BF%85%E5%A4%87%E8%BD%AF%E4%BB%B6/"/>
    <id>http://bear01github.io/2018/12/20/必备软件/</id>
    <published>2018-12-20T03:48:09.466Z</published>
    <updated>2018-11-25T14:27:44.017Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个菜鸟级别程序员，这里介绍一下我的一些常用软件</p><h2 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h2><ol><li>window10 专业版</li><li>虚拟机</li></ol><h2 id="办公"><a href="#办公" class="headerlink" title="办公"></a>办公</h2><ol><li>office 2016</li></ol><h2 id="社交"><a href="#社交" class="headerlink" title="社交"></a>社交</h2><ol><li>TIM</li><li>Wechat</li></ol><h2 id="娱乐"><a href="#娱乐" class="headerlink" title="娱乐"></a>娱乐</h2><ol><li>网易云音乐</li><li>英雄联盟</li><li>刺激战场</li></ol><h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h2><ol><li>chrome</li></ol><h2 id="编译器"><a href="#编译器" class="headerlink" title="编译器"></a>编译器</h2><ol><li>vs code</li><li>sublime</li><li>webstorm</li></ol><h2 id="记事本"><a href="#记事本" class="headerlink" title="记事本"></a>记事本</h2><ol><li>Typora</li><li>nodepad++</li></ol><h2 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h2><ol><li>git</li><li>GitHub</li></ol><h2 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h2><ol><li><a href="http://www.bear9596.club" target="_blank" rel="noopener">www.bear9596.club</a></li></ol>]]></content>
    
    <summary type="html">
    
      个人必备
    
    </summary>
    
    
      <category term="随笔" scheme="http://bear01github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Markdown 新手入门</title>
    <link href="http://bear01github.io/2018/12/20/markdown/"/>
    <id>http://bear01github.io/2018/12/20/markdown/</id>
    <published>2018-12-20T03:48:09.425Z</published>
    <updated>2018-11-22T16:36:11.626Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、什么是Markdown"><a href="#一、什么是Markdown" class="headerlink" title="一、什么是Markdown"></a>一、什么是Markdown</h3><p>在学会写博客后，慢慢发现有很多小伙伴都会使用Markdown语言，说实话，Markdown写东西真的好用。当然，绝大多数 人还不知道什么是Markdown！我觉得可以把它理解成一种排版语法，通过一些特殊的常见符号来替换成对应的排版格式，我们在word中点击鼠标来达到加粗、倾斜、增大字体的目的，在Markdown中被相应的特殊符号替代。Markdown用于解放鼠标，仅仅使用键盘就能排版出非常漂亮的文字、博客等（比如本文就是用Markdown编写的）。</p><p><strong>Markdown</strong> 的出现就是为了实现 <strong>易读易写</strong></p><p>在百度中是这么定义的：</p><p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p><p>作为一个程序员，github一定都用过吧，在每一个github项目的根目录中都会有一个README.MD的文本文件（用来说明和解释该项目），它就是用markdown语言编写的文本</p><h3 id="二、编译器"><a href="#二、编译器" class="headerlink" title="二、编译器"></a>二、编译器</h3><p>现在支持md格式的编译器有很多，也有在线支持 markdown编写，但是本能、离线的编译器还是要更强大一些，毕竟可以支持更强大的扩展功能和离线编辑，我使用的是windows下的一款专门编辑md的编辑器— <strong>Typora</strong> 我比较喜欢它简洁的界面和实时预览</p><p>当然还有很多好用的编译器，这个也需要根据自己的喜好选择</p><h3 id="三、语法介绍"><a href="#三、语法介绍" class="headerlink" title="三、语法介绍"></a>三、语法介绍</h3><p>   1.标题</p><p>   标题是文章中常用的格式。类似于html中的<code>&lt;h1&gt;</code>到<code>&lt;h6&gt;</code>标签，Markdown中1到6个#号来标志1到6号标题。所以要想把一段文字定义为标题，只需在前面加上若干的#号即可。当然html的h1、h2、h3这种也是可以使用的</p><p>   2.列表</p><p>   学过html的一定知道什么是有序列表和无序列表。在Markdown中非常方便，在文字前面加上<code>*</code>或者<code>+</code>或者<code>-</code>就可将其变成无序列表。在文字前面加上<code>1.</code>,<code>2.</code>,<code>3.</code>就可将其变成有序列表。</p><p>   3.引用</p><p>   如果你在此处引用别的地方的文字，那么就需要引用的格式。<br>   只需在引用文字前面加上一个<code>&gt;</code>号（大于号）即可。</p><blockquote><p>><a href="http://www.bear9596.club引用的样式" target="_blank" rel="noopener">www.bear9596.club引用的样式</a></p></blockquote><p>   4.粗体，斜体，删除线</p><p>   Markdown中粗体与斜体非常简单，用两个<code>*</code>号把文字包围相当于粗体，用一个<code>*</code>号把文字包围相当于斜体。使用两个<code>~~</code>号包围则显示删除线效果。<br>   例如： 这是<strong>粗体</strong>   这是<em>斜体</em>   这是<del>删除线</del></p><p>   5.链接，图片</p><p>   链接格式：<code>[title](URL)</code><br>   图片格式：<code>![title](URL)</code></p><p>   链接和图片的格式相当像，区别在于图片格式多一个<code>!</code>号。当然，图片同样可以像html格式来添加图片</p><p>   <img src="filename" width="" height=""></p><p>   6.代码块</p><p>   使用一对反引号即可包含一个行内代码使用一对三个反引号可以包括多行代码，另外多行Tab也可以用于代码段，例如： </p><p>   <code>print(&quot;hello&quot;);</code></p><p>   <code>print(&quot;hello&quot;);</code></p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;  </span><br><span class="line"></span><br><span class="line">int main()  </span><br><span class="line"></span><br><span class="line">&#123;  </span><br><span class="line"></span><br><span class="line">std::cout&lt;&lt;&quot;hello world!&quot;&quot;&lt;&lt;std::endl; </span><br><span class="line"></span><br><span class="line">return 0; </span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure><p>   7.表格</p><p>   创建表格，通过符号<code>-</code>分开第一行和其他行，通过<code>|</code>分开各个列</p><table><thead><tr><th>First Header</th><th>Second Header</th></tr></thead><tbody><tr><td>Content 1</td><td>Content 2</td></tr><tr><td>Content 3</td><td>Content 4</td></tr></tbody></table><h3 id="四、-一些实用小技巧"><a href="#四、-一些实用小技巧" class="headerlink" title="四、 一些实用小技巧"></a>四、 一些实用小技巧</h3><p>1.字符转义</p><p>   比如我们想输出反引号，但是markdown把反引号作为标记，有编程语言的基础的同学知道，转义符的存在。<br>   反斜线（）用于插入在 Markdown 语法中有特殊作用的字符。</p><p>2.首行缩进</p><p>   ​    markdown没有专门的符号来表示首行缩进，但总会有人想出办法。我们发现把输入法置为全角状态，然后再输入两个空格就可以了。比如我这段话就首行缩进了</p><p>3.字体大小</p><p>   markdown是兼容HTML的，所以可以使用<code>&lt;font&gt;</code>标签来设置字体大小。</p>   <font size="2">我被缩小了</font><h3 id="五、总结markdown"><a href="#五、总结markdown" class="headerlink" title="五、总结markdown"></a>五、总结markdown</h3><p>   markdown能够很好的兼容HTML，因为两者的组合可以实现各种神奇的效果，与Word不逞多让。这种小技巧还有很多，在这里就不在叙述。Markdown还有好多其他的用法，但是常用的最基本的也就那么几种，大家多用几次Markdown就会熟练了。当然了，有一定前端基础的用起来会更加顺手了</p>]]></content>
    
    <summary type="html">
    
      Markdown 新手入门
    
    </summary>
    
    
      <category term="学习" scheme="http://bear01github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Git 与SVN</title>
    <link href="http://bear01github.io/2018/12/20/git%E4%B8%8Esvn/"/>
    <id>http://bear01github.io/2018/12/20/git与svn/</id>
    <published>2018-12-20T03:48:09.413Z</published>
    <updated>2018-11-22T16:31:35.670Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-Git-和-SVN-孰优孰好？"><a href="#一-Git-和-SVN-孰优孰好？" class="headerlink" title="一 Git 和 SVN 孰优孰好？"></a>一 Git 和 SVN 孰优孰好？</h3><p>Git是分布式的，SVN是集中式的</p><p>这是两者最大的区别。若能掌握这个概念，两者区别基本搞懂大半。因为 Git 是分布式的，所以 Git 支持离线工作，在本地可以进行很多操作，包括接下来将要重磅推出的分支功能。而 SVN 必须联网才能正常工作。</p><p>Git复杂概念多，SVN简单易上手</p><p>所有同时掌握 Git 和 SVN 的开发者都必须承认，Git 的命令实在太多了，日常工作需要掌握add,commit,status,fetch,push,rebase等，若要熟练掌握，还必须掌握rebase和merge的区别，fetch和pull的区别等，除此之外，还有cherry-pick，submodule，stash等功能，仅是这些名词听着都很绕。</p><p>在易用性这方面，SVN 会好得多，简单易上手，对新手很友好。但是从另外一方面看，Git 命令多意味着功能多，若我们能掌握大部分 Git 的功能，体会到其中的奥妙，会发现再也回不去 SVN 的时代了。</p><p>Git分支廉价，SVN分支昂贵</p><p>在版本管理里，分支是很常使用的功能。在发布版本前，需要发布分支，进行大需求开发，需要 feature 分支，大团队还会有开发分支，稳定分支等。在大团队开发过程中，常常存在创建分支，切换分支的需求。</p><p>Git 分支是指针指向某次提交，而 SVN 分支是拷贝的目录。这个特性使 Git 的分支切换非常迅速，且创建成本非常低。</p><p>而且 Git 有本地分支，SVN 无本地分支。在实际开发过程中，经常会遇到有些代码没写完，但是需紧急处理其他问题，若我们使用 Git，便可以创建本地分支存储没写完的代码，待问题处理完后，再回到本地分支继续完成代码</p><h3 id="二-git核心概率"><a href="#二-git核心概率" class="headerlink" title="二 git核心概率"></a>二 git核心概率</h3><p>Git 最核心的一个概念就是工作流。</p><p>工作区(Workspace)是电脑中实际的目录。<br>暂存区(Index)类似于缓存区域，临时保存你的改动。<br>仓库区(Repository)，分为本地仓库和远程仓库。<br>从 SVN 切换到 Git，最难理解并且最不能理解的是暂存区和本地仓库。熟练使用 Git 后，会发现这简直是神设计，由于这两者的存在，使许多工作变得易管理。</p><p>通常提交代码分为几步：</p><p><strong>git add</strong>从工作区提交到暂存区<br><strong>git commit</strong>从暂存区提交到本地仓库<br><strong>git push</strong>或git svn dcommit从本地仓库提交到远程仓库<br>一般来说，记住以下命令，便可进行日常工作了（图片来源于网络）：</p><p>对比 Git 与 SVN，这篇讲的很易懂<br>[ Git命令 ]</p><h3 id="三-Git-SVN常用命令"><a href="#三-Git-SVN常用命令" class="headerlink" title="三 Git-SVN常用命令"></a>三 Git-SVN常用命令</h3><p>若服务器使用的 SVN，但是本地想要体验 Git 的本地分支，离线操作等功能，可以使用 Git-SVN功能。</p><p>下载一个 SVN 项目和它的整个代码历史，并初始化为 Git 代码库</p><p><code>$ git svn clone -s [repository]</code></p><p>查看当前版本库情况</p><p><code>$ git svn info</code></p><p>取回远程仓库所有分支的变化</p><p><code>$ git svn fetch</code></p><p>取回远程仓库当前分支的变化，并与本地分支变基合并</p><p><code>$ git svn rebase</code></p><p>上传当前分支的本地仓库到远程仓库</p><p><code>$ git svn dcommit</code></p><p>拉取新分支，并提交到远程仓库</p><p><code>$ svn copy [remote_branch][new_remote_branch] -m [message]</code></p><p>创建远程分支对应的本地分支</p><p><code>$ git checkout -b [local_branch][remote_branch]</code></p><h3 id="四-初始化"><a href="#四-初始化" class="headerlink" title="四 初始化"></a>四 初始化</h3><p>从本节开始，除特殊说明，以下命令均适用于 Git 与 Git-SVN。</p><p>在当前目录新建一个Git代码库</p><p><code>$ git init</code></p><p>下载一个项目和它的整个代码历史 [Git only]</p><p><code>$ git clone [url</code></p><h3 id="五-配置"><a href="#五-配置" class="headerlink" title="五 配置"></a>五 配置</h3><p>列举所有配置</p><p><code>$ git config -l</code></p><p>为命令配置别名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global alias.co checkout</span><br><span class="line">$ git config --global alias.ci commit</span><br><span class="line">$ git config --global alias.st status</span><br><span class="line">$ git config --global alias.br branch</span><br></pre></td></tr></table></figure><p>设置提交代码时的用户信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config [--global] user.name &quot;[name]&quot;</span><br><span class="line">$ git config [--global] user.email &quot;[email address]&quot;</span><br></pre></td></tr></table></figure><p>Git 用户的配置文件位于 ~/.gitconfig</p><p>Git 单个仓库的配置文件位于 ~/$PROJECT_PATH/.git/config</p><h3 id="六-增删文件"><a href="#六-增删文件" class="headerlink" title="六 增删文件"></a>六 增删文件</h3><p>添加当前目录的所有文件到暂存区</p><p><code>$ git add .</code></p><p>添加指定文件到暂存区</p><p><code>$ git add &lt;file1&gt; &lt;file2&gt; ...</code></p><p>添加指定目录到暂存区，包括其子目录</p><p><code>$ git add &lt;dir&gt;</code></p><p>删除工作区文件，并且将这次删除放入暂存区</p><p><code>$ git rm [file1][file2] ...</code></p><p>停止追踪指定文件，但该文件会保留在工作区</p><p><code>$ git rm --cached [file]</code></p><p>改名文件，并且将这个改名放入暂存区</p><p><code>$ git mv [file-original][file-renamed]</code><br>把文件名 file1 添加到 .gitignore 文件里，Git 会停止跟踪 file1 的状态。</p><h3 id="七-分支"><a href="#七-分支" class="headerlink" title="七 分支"></a>七 分支</h3><p>列出所有本地分支</p><p><code>$ git branch</code></p><p>列出所有本地分支和远程分支</p><p><code>$ git branch -a</code></p><p>新建一个分支，但依然停留在当前分支</p><p><code>$ git branch [branch-name]</code></p><p>新建一个分支，并切换到该分支</p><p><code>$ git checkout -b [new_branch][remote-branch]</code></p><p>切换到指定分支，并更新工作区</p><p><code>$ git checkout [branch-name]</code></p><p>合并指定分支到当前分支</p><p><code>$ git merge [branch]</code></p><p>选择一个 commit，合并进当前分支</p><p><code>$ git cherry-pick [commit]</code></p><p>删除本地分支，-D 参数强制删除分支</p><p><code>$ git branch -d [branch-name]</code></p><p>删除远程分支</p><p><code>$ git push [remote] :[remote-branch]</code></p><p>八 提交</p><p>提交暂存区到仓库区</p><p><code>$ git commit -m [message]</code></p><p>提交工作区与暂存区的变化直接到仓库区</p><p><code>$ git commit -a</code></p><p>提交时显示所有 diff 信息</p><p><code>$ git commit -v</code></p><p>提交暂存区修改到仓库区，合并到上次修改，并修改上次的提交信息</p><p><code>$ git commit --amend -m [message]</code></p><p>上传本地指定分支到远程仓库</p><p><code>$ git push [remote][remote-branch]</code></p><h3 id="九-拉取"><a href="#九-拉取" class="headerlink" title="九 拉取"></a>九 拉取</h3><p>下载远程仓库的所有变动 (Git only)</p><p><code>$ git fetch [remote]</code></p><p>显示所有远程仓库 (Git only)</p><p><code>$ git remote -v</code></p><p>显示某个远程仓库的信息 (Git only)</p><p><code>$ git remote show [remote]</code></p><p>增加一个新的远程仓库，并命名 (Git only)</p><p><code>$ git remote add [remote-name][url]</code></p><p>取回远程仓库的变化，并与本地分支合并，(Git only), 若使用 Git-SVN，请查看第三节</p><p><code>$ git pull [remote][branch]</code></p><p>取回远程仓库的变化，并与本地分支变基合并，(Git only), 若使用 Git-SVN，请查看第三节</p><p><code>$ git pull --rebase [remote][branch]</code></p><p>十 撤销</p><p>恢复暂存区的指定文件到工作区</p><p><code>$ git checkout [file]</code></p><p>恢复暂存区当前目录的所有文件到工作区</p><p><code>$ git checkout .</code></p><p>恢复工作区到指定 commit</p><p><code>$ git checkout [commit]</code></p><p>重置暂存区的指定文件，与上一次 commit 保持一致，但工作区不变</p><p><code>$ git reset [file]</code></p><p>重置暂存区与工作区，与上一次 commit 保持一致</p><p><code>$ git reset --hard</code></p><p>重置当前分支的指针为指定 commit，同时重置暂存区，但工作区不变</p><p><code>$ git reset [commit]</code></p><p>重置当前分支的HEAD为指定 commit，同时重置暂存区和工作区，与指定 commit 一致</p><p><code>$ git reset --hard [commit]</code></p><p>新建一个 commit，用于撤销指定 commit</p><p><code>$ git revert [commit]</code></p><p>将未提交的变化放在储藏区</p><p><code>$ git stash</code></p><p>将储藏区的内容恢复到当前工作区</p><p><code>$ git stash pop</code></p><h3 id="十一-查询"><a href="#十一-查询" class="headerlink" title="十一 查询"></a>十一 查询</h3><p>查看工作区文件修改状态</p><p><code>$ git status</code></p><p>查看工作区文件修改具体内容</p><p><code>$ git diff [file]</code></p><p>查看暂存区文件修改内容</p><p>$ git diff –cached [file]</p><p>查看版本库修改记录</p><p><code>$ git log</code></p><p>查看某人提交记录</p><p><code>$ git log --author=someone</code></p><p>查看某个文件的历史具体修改内容</p><p><code>$ git log -p [file]</code></p><p>查看某次提交具体修改内容</p><p><code>$ git show [commit]</code></p><p>从 SVN 到 Git，除本文列举的基础概念和常用命令，包括但不限于如何从 SVN 服务器切换到 Git 服务器，分支模型管理等也非常重要。</p>]]></content>
    
    <summary type="html">
    
      Git 和 SVN 孰优孰好？
    
    </summary>
    
    
      <category term="学习" scheme="http://bear01github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>考研那些事</title>
    <link href="http://bear01github.io/2018/10/08/%E8%80%83%E7%A0%94%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
    <id>http://bear01github.io/2018/10/08/考研那些事/</id>
    <published>2018-10-08T04:30:00.000Z</published>
    <updated>2018-10-23T05:00:45.405Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>不为未来的模糊不清担忧，只为现在的清清楚楚努力     —–sir_bear</p></blockquote><p>考研结束快小半年了吧，一直想写点东西，一是留给自己，将来可以有所回忆；二是作为过来人，希望通过自己的考研历程，能对后面考研的同学有所帮助。<a id="more"></a><br><img src="/assets/score.png" alt=""></p><h3 id="为什么决定考研"><a href="#为什么决定考研" class="headerlink" title="为什么决定考研"></a>为什么决定考研</h3><p>考研并不是我从上大学一开始就有的想法，记得大一大二的时候，我甚至认为考研是对时间的一种浪费，读研需要三年，而我本科毕业工作三年，三年的工作经验也许比一个刚出来研究生更有价值。而且一年的努力，最后如果没考上，会有多不甘心，更是在浪费时间，也会错失很多就业机会……这是我当时真实的想法</p><p>大三的时候，我把华为作为了我未来努力的目标，所以我准备去考个华为认证，准备了几个月，当时加了一些相关的qq群，在群里通过大家的聊天，接触到一些步入社会的人，慢慢的了解到了有些事情没有我想的那么简单，开始我以为考个华为认证，也许有机会能踏入华为的大门，也许毕业后找工作会很轻松，有点天真了！可是那个时候我还是没有考研的想法，到了大三下学期开学的时候，是考研正式准备的时间，班上考研的同学相继去报了考研班，她也在考研。那个时候我的华为认证也准备的差不多了，当时我准备报名考试，需要三千块钱，给家里说明情况后，爸妈给我打了三千块钱，支持我去考那个认证，可是就在我要去网上报名的时候，我犹豫了，因为那个时候已经萌发出考研的想法了，现在还记得决定考研的那个晚上，我一整晚没有睡，躺在床上想了很多（就不一一细说了），第二天上午上完第一节课，就拿着3000块钱跑去报了一个考研辅导班（报这个班并不是因为我觉得考研就必须要报班，而是不给自己留退路而已！），就这样，我放弃了华为认证，去考研了，我现在都不敢相信我当时怎么会突然下了这么大的决心，也许是一时冲动，虽然只想了一晚上，不过我又不认为那是一时冲动做的决定，因为我从来没有为自己做的这个决定而后悔过</p><p>总结一下吧，决定考研大概有这么几点原因：</p><ol><li>因为一个人，没有她也许不会考研</li><li>为了进华为，当初的一个目标</li><li>为了证明自己，说实话当初提到要考研，被嘲笑过</li><li>为了提高学历，提高就业门槛，终究还是为了将来的发展</li><li>为了一份荣誉！</li></ol><h3 id="我的备考过程"><a href="#我的备考过程" class="headerlink" title="我的备考过程"></a>我的备考过程</h3><p>报完考研辅导班，那个时候已经快四月份了，班上考研的同学都已经准备了一段时间，而我才刚开始，那个时候特别兴奋，学习起来贼带劲儿，所以效率比较高，不久跟上大家的进度了，当然，我并不是为了赶进度，也建议考研的同学，你可以了解身边考研同学的复习情况，但千万不要为了跟上大家的进度而去赶进度，看起来效率很高，其实很多知识点你都是模糊不清的。</p><p>刚开始，因为那股新鲜劲，觉得考研挺轻松的，也没有什么太大的压力，但是过了那股新鲜感后，就开始觉得有点累了，毕竟每天都要很早起来，晚上很晚回去，每天都在重复着这种生活，不是我一个人觉得累，基本上每一个考研过来人都会有同样的感受。那个时候，我们还有课，因为才大三，我们每天做的就是上课，去图书馆，吃饭，去图书馆… 我算比较幸运的，大二的时候考了网络工程师，所以大三开设的这门课我可以不用上，所以有更多的时间复习考研，但是我四级还没过，所以暑假前，在英语这方面来说，是以四级为主，英语不像数学，复习数学必须有针对性，而英语就算前期你只复习四级，对考研一样有很好的效果，当然，四级考试结束后，还是以复习考研英语为主。其实考研几门科目中，数学才是重中之重，也是难中之难，你会发现，你付出了大部分时间在数学上，最后考的最不满意的也许还是数学！很多人总分过了却没考上都是因为数学不过线</p><p>考研过程中，我觉得有几个志同道合的研友，营造一个好的学习环境是很重要的，对你产生的影响也许是潜移默化，研友并不是说要一起复习，平时能经常交流，谈谈复习进度，聊聊复习状态，分享好的复习资源，相互借鉴复习方法，一起讨论、解决问题，哪怕是闲暇之余，开开玩笑，吹吹牛逼，对考研都是有很大帮助的！所以，我建议考研的同学，不要封闭式的复习，一个人复习，也许自我感觉良好，也许你觉得你的复习方法很好，效率很高，认为自己很努力，但你却不知道别人比你做的更好，同时，你也会错失很多资源，也没人一起讨论、解决问题，就是心情烦躁的时候，都找不到一个人聊聊天。</p><p>考研复习可以四个阶段，我整个考研历程也是一波三折，经历了很多事<br>基础阶段：（3-6月）<br>刚开始复习的时候，也是基础阶段，我们在图书馆专门的考试自习室复习，那个时候主要复习数学和英语（四级），大概在那里复习了两个月，后来由于自习室被改造为办公室，考研自习室被安排到了教学楼，我们在教学楼复习一直到7月学校放假，这个阶段，我们也刚好把数学基础复习完；英语我基本上就是背单词，翻译早些年真题上的阅读，因为前期我在准备四级，考研英语也没怎么复习。<br>强化阶段：（7-9月）<br>暑假由于天气太热，我们学院又安排了有空调的实验室给我们做自习室，暑假也是复习最重要的时间段，也是复习的强化阶段，有个舒适的学习环境的确能让大家静下心来，不那么容易浮躁。暑假上了汤家凤的强化课，但是我也看了张宇的强化视频，还是比较喜欢张宇的上课风格，暑假结束后，实验室不能待了，天气还是很热，又不想去教学楼，就去图书馆又待了一段时间，那个时候，也是很有意思的，为了把一大箱考研复习书藏在图书馆，和图书馆管理员周旋了接近一个月，最后还是认输了<br>冲刺阶段：（10-11月）<br>后来觉得麻烦，索性就在寝室复习了，当时班上的同学都去外面实习去了，几个寝室除了考研的也没其他人了，学习环境还算可以，也挺方便，所以10,11月我是在寝室复习的，和另外两个研友搬到了一个空闲的寝室，那个寝室是没有电的，我们晚上都是拿着充电宝开着台灯（台灯网上买的10块钱那种）复习，每天晚上睡觉前，吹吹牛逼，讲讲故事，早上起来在阳台背书，现在想想挺怀恋的，刚好也是冲刺阶段，在寝室复习很方便，节约了很多时间。我们几个搬到一个寝室后，感觉复习效果其实还不错，最后我们三个考的都还不错。但在寝室复习并不适合所有人，学不进去，还是去图书馆比较合适。<br>狂背阶段：（12月）<br>12月份，最后二十几天，就没在寝室复习了，去了教学楼，有时做做模拟题，主要是为了适应考场，毕竟考试是在教学楼。最后二十几天数学、英语其实已经定性了，但是专业课和政治，在这二十几天却是非常重要的，因为专业课和政治有很多东西需要背。十二月份基本上就是做各种模拟卷，数学模拟卷（张宇的四套卷、汤家凤的八套卷），政治模拟卷（肖八、肖四），其余时间就是背，每天在教学楼的顶楼背，晚上回寝室背，早上起来背，你会发现图书馆、教学楼，到处都是在背书，那个时候天气真的很冷，大家裹着大衣，拿着一杯热水，背着政治、英语、专业 ，那个时候感觉很痛苦，但是现在却是真的有些怀念了</p><p><img src="/assets/img/8.5.jpg" alt=""></p><p>各科复习建议：<br>数学：<br>最迟3月份开始复习，一直到考试结束，数学一定要多做题，可以看看张宇的课，汤家凤的也可以，建议不用去报什么辅导班，浪费钱，也浪费时间，那些视频网上都能找到，哔哩哔哩上面有，建议考试视频都用1.5倍速度看，节省时间，数学有不懂得可以和研友多讨论，这样效果会更好，自己准备一个笔记本，不是用来抄视频上的笔记，而是用来总结自己数学上的一些不容易记住的知识点，自己总结的各种公式，反正只要是自己觉得需要注意的东西都可以记下来，在考前，这个本子是非常有用的<br>英语： 如果四级没过，可以先复习四级，6月份考试结束后再以考研英语为主，研究生再去考四级会很老火，因为大家都已经过了六级，或者在考六级了！！！其实我考研的时候，英语投入的时间和精力相对别人要少得多，定的目标也没有很高。英语如果要看视频，建议看蒋军虎的，特别是阅读，他讲的还不错，自己要买一本单词书，我买的是郭崇兴的《真题词频语境记忆精读版》，我觉得还不错，根据多年来真题中单词出现的频率排序的。最后一个多月要开始背作文，还是建议背王江涛的，十篇小作文，五篇大作文，我只背了小作文，大作文实在是背不下来，就自己整理几个模板，把模板背了下来，个人觉得基础一般的最好还是背模板。<br>专业：<br>9月份开始专业复习，先看教程书，看一遍就够了，有些非重点内容可以略过，或者大致看一下，计算机网络这本书比较厚，很多知识点都是废话，也有很多章节是不会考的，复习前，看看考研大纲了解清楚。复习资料推荐买天勤的高分笔记系列，高分笔记把教材上的知识点进行了梳理和相应注释，通俗易懂。课后习题一定要认真做完，因为计算题和简答题基本上全是课后习题，在最后一个月的时候，课后习题认真背，当然，不用全部背下来，最近两三年的基本可以排除不会考，计算题不用背，也背不了，搞懂就可以了，分析题基本上是每章考一个，计算题也是，所以自己可以根据最近几年的真题做个预测，然后再去背你预测的题<br>政治：<br>政治大家都认为要报班，其实我觉得没有必要报班，因为上了课还是学不到什么，记不住的还是记不住，马原有点不好理解，可以在哔哩哔哩上面去看相应的视频，政治视频推荐看徐涛的，其他老师的就没必要去看了，看一个老师的容易形成一个体系，题必须买肖秀荣的1000题和八套卷、四套卷，前期把1000题做完，然后做8套卷，最后做4套卷，4套卷是最重要的，必须认真做，在最后半个月左右，四套卷的大题要背完，背政治不要拿着肖四模拟卷直接去背，很痛苦，你也背不完的，背完了，答题卡上也写不下，肖四出来后，一些考研公众号会有很多肖四背诵简洁版，到时多留意一下应该都能找到，别人整理好了的答案背起来要容易一点，也要轻松一点</p><h3 id="考场上的亲身感受"><a href="#考场上的亲身感受" class="headerlink" title="考场上的亲身感受"></a>考场上的亲身感受</h3><p>考场如战场！在下面准备的再怎么充分，上了考场一样会紧张，紧张的来源大部分是因为考试时间的快速流逝，越到后面越慌，尤其是数学，没有几个人敢说时间是够用的</p><p>政治考试：<br>第一门考的政治，我不知道为什么我的时间差点不够用，在交卷的最后一刻，我还在不停的写，而且我并不是写的很多，每道大题我也只写了三分之二，可能是我写字比较慢，而且背的不是特别熟，坐在我旁边的是我的研友，看到他提前一个小时就写完了，这让我感到一些慌张，但是这并不影响。政治这门考试，你知道就是知道，不知道就是不知道，想再久也没用，所以做政治的感觉就是把你背住的东西写在答题卡上就行了，当然写的东西要和题目能对于起来，不要牛头不对马嘴就行了。其实政治考试分数差距主要在选择题上，分析题差距真的不是很大。另外分析题不是写的越多分数就越高 ，我觉得写个三分之二就足够了，写的太多，阅卷老师也不想去看。考完政治，心态一般，没有觉得考的的很好，也没有感到很失落</p><p>英语考试：<br>第二门考的英语，英语考试中，我出现了两个重大失误，一个就是作文跑题了（因为作文有个单词我理解错了），再一个就是小作文没有落署名，考试过程中，其实时间把控的还挺好，但是做完感觉并不好，阅读做完感觉很蒙，很多题的答案都是凭感觉选出来的，翻译也是，我翻译完了，都不知道原来这个人是比尔盖茨，反正做完英语给我的感觉不是很好，当时估分50左右，最后真的也只有50分，其实这个分数还在我接受的范围之内吧，我给自己定的目标就是50-60，因为英语基础不是很好，所以要求也没有太高，当然花的时间也没有太多。说实话，考完英语，心态就有点不稳了，因为出现了如此低级的错误！</p><p>数学考试：<br>第三门考的数学，我现在还记得考数学的时候，心态是怎么变化的，上考场前，觉得自己考个100+肯定没问题，上了考场做完选择题，感觉有点难度，有两道选择题不确定，做完填空题，觉得也还行，选择填空大概用了60-70分钟，感觉时间有点长了，心里想着要抓紧时间做大题了，做完第一道大题用了20分钟，那是一道定积分的题，算出来的答案和所用的时间让我有点慌了，不敢花时间去检查了，赶紧做下一题，发现后面的大题每一题都不简单，题型和以前的真题变法有点大，难度也加大了很多，这个时候我彻底慌了，后面的大题没有一道是能够很流畅的做完的，心已经静不下来了，心态完全炸了，想着完了！完了！然后很多题都是做了一半就下不了笔了，然后又跳到其他题，直到最后时间还剩半个小时的时候，我看了下自己做的大题，发现完整做完的只有两道，最后两道线性代数还没开始做，这个时候我知道数学考100+已经没希望了，我不再想着怎么把那些不会做的题给算出来，而是想着怎么能多拿几分，说实话，在这半个小时，我还拿到了不少分，比如，证明题，有的步骤太难算或者证不出来，我就直接跳过，有的直接得出结果，然后拿这个结果去做第二问…因为那个情况下，已经没办法保证每道题都完全正确了。考完数学，心凉了半截，估分只有60分左右，大题做的一塌糊涂。包括我那位研友也是，中午饭都吃不下了，当时考完数学，真的差点就放弃了</p><p>专业考试：<br>最后考的专业，只有考专业课是最轻松的时候，用了一个小时左右就做完了，专业课的时间是绝对够用的，对于我来说，也只有专业课的时间感觉很充足，这对于大多数考生来说，专业课也许是唯一的强心剂。英语出现了这么低级的错误数学考的一塌糊涂，我差点就放弃了，我当时想的是这场考研算是失败了，但是想着努力了这么久，最后一趟考试怎么也要考完。那个时候放弃了，我现在也许在二战，也许去工作了，也不会在这里写考研感想了。</p><h3 id="当分数出来的那一刻"><a href="#当分数出来的那一刻" class="headerlink" title="当分数出来的那一刻"></a>当分数出来的那一刻</h3><p>我不记得是什么时候出的成绩，但我永远记得看到成绩出来那一刻的心情，就像一个濒临死亡的人看到了重生的希望一样。<br>在成绩出来之前，我估分只有280左右，不是刻意估的很低，就是正常的估分。在那个寒假，其实我已经没报什么希望，都准备去考教师资格证了，还在网上花了200块交了报名费。到查成绩那几天，心里多少还是有些忐忑不安，在成绩正式出来的前一天晚上，一起考研的研友发了一个成绩查询的链接在群里，当时我还在打游戏呢，看到可以查成绩了，游戏也不打了，慌忙点开了那个链接！输入信息！但是却迟迟不敢点确定，很多人应该都深有体会吧，和自己战斗了好一会儿，终究还是点下去了！我又迅速用手挡住了屏幕，慢慢的把手挪开，看到一个3，居然是3开头的，最后看到了335这个分数，你们能想象当时那个心情吗，心脏差点承受不住，真的，那一刻，我从未如此激动过，这个分数只有在我当初给自己定的目标里才有的。一起考研的研友考的也不错，那一晚我们都很兴奋，兴奋的睡不着。那一刻，是我人生中落差最大的一次，从低谷到顶峰的那种感觉。</p><h3 id="在复试过程中的经历"><a href="#在复试过程中的经历" class="headerlink" title="在复试过程中的经历"></a>在复试过程中的经历</h3><p>过完年就早早去了学校，开始准备复试了，复试内容分为 笔试+面试+口语 ，笔试是最重要的一部分，其次是面试，最后就是口语了。复试环节，专硕、学硕都一样。另外需要注意一下，考研初试成绩决定了你能不能进入你的目标学校，而复试决定了你能不能把名次提上去，考研最后的成绩（初试50%+复试50%）对于研一的奖学金起到了决定性作用，研一的奖学金是根据考研最后总排名决定的，重邮的奖学金标准：一等12000，二等8000，三等4000，当然，奖学金的覆盖率是70%，70%的研究生都会拿到奖学金，但是一二三等之间差额巨大。所以，如果你想拿奖学金，想拿一等、二等，那么复试一定要认真准备了。</p><p>笔试：重邮笔试考的是C语言，<br>C语言笔试要比专业课难一点，我当时有两大题（一个汉罗塔、一个对文件字符串处理）不会做。所以在准备复试的时候，c语言一定要好好复习，多在电脑上敲敲代码，因为有编程题，还是纯手写没有调试的机会，也没有那么多时间给你去想，笔试的时间你一定会觉得不够用的。并且在复试过程中，笔试相对面试和口语，是挂人最多的，很多人都在笔试上没有通过。重邮的c语言期末题要好好做，大纲上的那些经典算法也要搞懂，多在电脑上敲几遍。</p><p>面试：<br>在复试前一周就可以开始准备面试了。面试大概有4、5个老师，面试场地就是教学楼的教室里面，进去先自我介绍，大概1-2分钟吧，别太长，不然老师会打断你，然后就是提问环节了，这个时候，就只能随机应变了，因为你不知道他要问什么，一般都是一些专业性的问题。我面试的并不好，基本上只回答上了一个问题。但是需要提醒一下，不知道就是不知道，不要不懂装懂，在那里和老师瞎扯。面试需要准备的东西：</p><ol><li>简历，简历要用简洁一点的模板，不要搞得花里胡哨，多打印几份，面试的时候大概有4-5个老师，最好每个老师一份</li><li>成绩单，多复印几份，面试的老师对成绩单还是挺看重的，所以对成绩单上面的专业课一定要熟悉，至少要知道课程内容是什么。</li><li>重要奖项的复印件 这个也算是个加分项</li><li>项目，如果做过项目的，并且获得过奖，可以好好准备一下，对项目一定要熟悉</li><li>自我介绍，自己准备一篇自我介绍，然后把它背下来，时间不要超过3分钟</li><li>最后准备几个老师常问的一些问题</li></ol><p>口语：<br>对于英语基础不好的同学来说，可能觉得口语很难，但是经历过你就知道了，其实口语没有想象中的那么难，并且口语也不会挂人。口语总分20分，大多数考生都是13-17分，我只考了14分，对于口语，我们需要准备的就是一个英语的自我介绍，大概一两分钟的时间，其他的不需要准备，重邮口语是分小组进行的，每两个人一组，学校会给我们分好组，分好组后，可以去找自己小组的同学熟悉一下。在考试的时候，其实也是一个小面试，里面有两个老师，老师都很随和，所以不会感到太大压力，先是两个人分别做自我介绍，然后老师会拿出一堆字条，每个纸条上有一个话题以及几个问题，两个考试就根据抽到的话题进行对话，其实就是纸条上的那几个问题，互相提问，然后简单回答一下，对话完后，就是老师提问时间了，老师会根据话题，或者你的自我介绍的内容简单提两个问题，能听懂回答上来，分数会高一点，听不到，回答不上也没关系，只要自我介绍、考生之间对话没问题，也能得个13、14分的，我当时就是没有听懂老师的问题 ，所以考了14分，但也足够了。总之，口语不用担心，准备一个自我介绍就可以了。</p><p>复试过程中还有一个至关重要的环节，就是找导师，在初试成绩出来后，确定自己能够进入复试后就可以开始联系导师了，可以给导师发邮件，介绍一下自己的考研情况，本科学习情况，以及自己的一些想法。联系好导师后，在复试口语结束后，学校会安排导师见面会的，这个见面会一定要去，基本上在这个见面会上，导师就会确定自己想要的学生，如果见面会结束了才去联系导师，如果导师下面的名额满了，如果你不是特别牛逼，那导师一般不会要你的。如果自己找不到导师，最后的结果就是由学校给你安排，要么被分到外院的导师名下，要么分到某些导师名额没有满的名下，名额没有满的导师，自己想想为什么没有满吧！所以选导师这个环节也是至关重要的，导师在你的三年研究生学习中起到了很重要的作用。</p><h3 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h3><p>回想整个考研过程，挺怀恋那个时候充实的生活，忙碌的状态，早上七点起床、晚上一点睡觉，当然，不是说这段时间一直在学习，有的时候学累了就打两把游戏，周末出去打打篮球，我始终认为不是投入时间越多，复习效果就越好，你的长时间持续投入绝对不是100%的投入，适当的放松也是非常有必要的。考研没有想象中的那么难，但也没有那么简单，没有付出努力的人是绝对考不上，付出了努力也不一定就能考上，考研成功有很多因素，努力程度、学习方法、学习效率、心态、以及自我衡量等，要知道自己有几斤几两，不是说你想考清华、北大，努努力就能考上。</p><p>考研能让一个人成长，让你成长的不是这个结果，而是这个过程。这个过程让我们养成了某些好的习惯，提高了自学能力，提高了抗压能力，这些改变是潜移默化的，对我们的人生影响也是潜移默化的，不管考研成功还是失败，都能让我们在不知不觉中成长了许多</p><p>希望我的考研分享能对大家有多帮助，考研的同学有什么疑惑欢迎留言，需要重邮专业复习资料的也可以留个邮箱，免费发给大家</p><blockquote><p>找个理由，定个目标，剩下的只管去干    ——bear</p></blockquote>]]></content>
    
    <summary type="html">
    
      在考研阶段的那些事
    
    </summary>
    
    
      <category term="随笔" scheme="http://bear01github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>日记本---2018</title>
    <link href="http://bear01github.io/2018/09/13/Record-the-life/"/>
    <id>http://bear01github.io/2018/09/13/Record-the-life/</id>
    <published>2018-09-13T11:30:53.000Z</published>
    <updated>2019-01-23T06:42:16.343Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>日有所记，记有所得，得有所悟，悟有所思  ————-bear</p></blockquote><p>把这篇文章当做自己的日记本，记录自己每天的状态，<br><a id="more"></a></p><h3 id="2018-12-31"><a href="#2018-12-31" class="headerlink" title="2018.12.31"></a>2018.12.31</h3><p>2018年的最后一天出去玩了，外面很冷，我们去了游乐场，玩了很多项目，摩天轮、攀岩、海盗船、碰破车、划船…很冷，但也很刺激，最重要的是开心！</p><p>那些曾经、过去，开心、难过，2018再见！</p><h3 id="2018-12-22"><a href="#2018-12-22" class="headerlink" title="2018.12.22"></a>2018.12.22</h3><p>去年的今天那是十分的焦作。时间过得还是挺快的，一晃一年过去了！</p><h3 id="2018-12-14"><a href="#2018-12-14" class="headerlink" title="2018.12.14"></a>2018.12.14</h3><p>感冒中….难受</p><h3 id="2018-12-14-1"><a href="#2018-12-14-1" class="headerlink" title="2018.12.14"></a>2018.12.14</h3><p>曾经的曾经还是曾经，过去的过去还是过去</p><h3 id="2018-12-13"><a href="#2018-12-13" class="headerlink" title="2018.12.13"></a>2018.12.13</h3><p>台下十年功！ 台上五分钟！今天算是完美阐释了！但这五分钟还是很高效的！</p><h3 id="2018-12-5"><a href="#2018-12-5" class="headerlink" title="2018.12.5"></a>2018.12.5</h3><p>买了一个腾讯云服务器，准备把博客放到上面去，但是瞎搞了半天也没部署上去，真的很菜啊</p><h3 id="2018-11-25"><a href="#2018-11-25" class="headerlink" title="2018.11.25"></a>2018.11.25</h3><p>喜欢在篮球场上打球的感觉，哪怕是和一群陌生人打球，都能感觉很舒坦</p><h3 id="2018-11-8"><a href="#2018-11-8" class="headerlink" title="2018.11.8"></a>2018.11.8</h3><p>坐等双十一，要冻死了！</p><h3 id="2018-10-23"><a href="#2018-10-23" class="headerlink" title="2018.10.23"></a>2018.10.23</h3><p>感觉又颓废了，上午睡到9点，起来打游戏到12点</p><h3 id="2018-10-6"><a href="#2018-10-6" class="headerlink" title="2018.10.6"></a>2018.10.6</h3><p>国庆家里七日游，很久没回老家了，回去一趟感觉一切都很亲切，就连空气都是那么的清新。还好没有去高速看堵车，没去景区看排队</p><h3 id="2018-9-24"><a href="#2018-9-24" class="headerlink" title="2018.9.24"></a>2018.9.24</h3><p>中秋节快乐</p><h3 id="2018-9-15"><a href="#2018-9-15" class="headerlink" title="2018.9.15"></a>2018.9.15</h3><p>有些人开的玩笑，你心里别扭，那就说明这根本不是玩笑而是嘲笑。</p><h3 id="2018-9-14"><a href="#2018-9-14" class="headerlink" title="2018.9.14"></a>2018.9.14</h3><p>作为一个英雄联盟玩家，今天这场bo5对决看的让人很是激动，打的很精彩，uzi~很强！恭喜RNG （RNG vs IG）</p><h3 id="2018-9-12"><a href="#2018-9-12" class="headerlink" title="2018.9.12"></a>2018.9.12</h3><p>今天学校报到，正式成为重邮的一份子</p><h3 id="2018-9-9"><a href="#2018-9-9" class="headerlink" title="2018.9.9"></a>2018.9.9</h3><p>今天这一天真是够累的，上山下山来来回回跑，东西搬到手软，晚上9点半才吃饭<br>最气的是被骗了，具体就不说了，有点丢人，就当花钱买个教训吧，告诫自己，也告诫大家，别当什么老好人！！！</p><h3 id="2018-9-3"><a href="#2018-9-3" class="headerlink" title="2018.9.3"></a>2018.9.3</h3><p>今天有两件比较奇葩的事，<br>第一件事：去医院拔智齿，开始以为只长了一颗，结果拔出来三颗，三颗长在同一个地方。不敢相信，平时我一点感觉都没有，医生说还是第一次见到我这种情况，然后就把我的牙齿留下做样本了…</p><p>第二件事：我准备申请校园贷款，需要家庭情况调查表，去街道办事处盖章，结果街道办不给我盖，说我拿这个不是去贷款的，是去骗学校的补助的，我怎么解释都不相信，还说什么他也是读书过来的，都懂我们这些心思。你懂个大头鬼啊，你读书是多少年的事了</p><h3 id="2018-9-1"><a href="#2018-9-1" class="headerlink" title="2018.9.1"></a>2018.9.1</h3><p>请了几天假，回家到医院检查了鼻子，又照了个CT ，还好问题不大，拿了药，医生让我注意饮食，少熬夜</p><h3 id="2018-8-30"><a href="#2018-8-30" class="headerlink" title="2018.8.30"></a>2018.8.30</h3><p>这几天一直在流鼻血，都吓到同事了，该去医院看看了</p><h3 id="2018-8-18"><a href="#2018-8-18" class="headerlink" title="2018.8.18"></a>2018.8.18</h3><p>难受的时候最好的办法就是找几个兄弟喝喝酒、唠唠嗑</p><h3 id="2018-8-8"><a href="#2018-8-8" class="headerlink" title="2018.8.8"></a>2018.8.8</h3><p>今天被点名了，内容需要整改，不能出现某些字眼。。。。</p>]]></content>
    
    <summary type="html">
    
      记录生活点滴
    
    </summary>
    
    
      <category term="记录生活" scheme="http://bear01github.io/tags/%E8%AE%B0%E5%BD%95%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>系统的下载、安装、激活</title>
    <link href="http://bear01github.io/2018/09/12/system-setup/"/>
    <id>http://bear01github.io/2018/09/12/system-setup/</id>
    <published>2018-09-12T15:30:53.000Z</published>
    <updated>2018-09-16T05:10:55.947Z</updated>
    
    <content type="html"><![CDATA[<p>操作系统在网上有很多镜像，这里推荐我自己用的系统下载地址，我的系统是在msdn下载的（msdn.itellyou.cn），也可以百度“我告诉你”或者“I tell you” ，这个网址上的系统算是纯净版了，而且系统版本很多，也支持多种语言的版本，有什么疑问可以给我留言，激活软甲找不到，可以留下你的邮箱</p><h2 id="系统下载"><a href="#系统下载" class="headerlink" title="系统下载"></a>系统下载</h2><p>下载地址：msdn.itellyou.cn（我告诉你）<br>下载步骤：一张图搞定，第五步复制链接后用迅雷下载即可！<br><img src="/assets/load.png" alt=""></p><h2 id="系统安装"><a href="#系统安装" class="headerlink" title="系统安装"></a>系统安装</h2><p>前期准备：准备一个容量不小于8G的u盘，保证U盘上没有什么重要文件，为了防止后面拷贝大文件出现问题，请先将u盘格式化,如图，文件系统一定要选择NTFS，其他默认即可。<br><img src="/assets/geshihua.png" alt=""><br>下面两种方法选择一种即可，第一种方法系统安装完成后特别纯净，桌面就一个回收站，第二种方法，由于启动盘工具绑定了一些软件，系统安装完成后，会自动安装一些软件。如果是小小白，推荐第二种方法，装系统过程中出现的问题要少一些</p><h3 id="方法一：使用UltraISO软碟通"><a href="#方法一：使用UltraISO软碟通" class="headerlink" title="方法一：使用UltraISO软碟通"></a>方法一：使用UltraISO软碟通</h3><ol><li>百度UltraIS下载软件并安装</li><li>选择试用打开软件</li><li>点击文件-&gt;打开，找到自己下载的ios系统镜像</li><li>点击启动-&gt;写入硬盘镜像</li><li>点击硬盘驱动器，选择插入的U盘，其他默认即可</li><li>点击写入（会自动格式化u盘，重要文件提前备份到电脑上）</li><li>等进度条100%刻录便完成，这个U盘就可以用来装系统了</li><li>关机，连续按快捷启动键，一般都是F12，不同笔记本可能有区别，可以根据自己电脑型号百度查询，进入快捷启动界面后，选择U盘对应的那项回车，就会进入安装界面</li><li>出现安装界面后根据提示完成安装即可</li></ol><h3 id="方法二：使用u盘启动盘制作工具"><a href="#方法二：使用u盘启动盘制作工具" class="headerlink" title="方法二：使用u盘启动盘制作工具"></a>方法二：使用u盘启动盘制作工具</h3><p>U盘启动盘制作工具网上有很多，如：大白菜、老毛桃、U大师等等</p><ol><li>百度上面任意一个制作工具，如老毛桃，进入官网，下载装机版并安装到电脑上</li><li>打开老毛桃u盘启动盘制作工具后，将u盘插入电脑usb接口，程序会自动扫描，我们只需在下拉列表中选择用于制作的u盘，然后点击“一键制作”按钮即可，如下图所示：<br><img src="/assets/zhizuo.jpg" alt=""><br>此时会弹出一个警告框，提示“警告：本操作将会删除 I：盘上的所有数据，且不可恢复”。在确认已经将重要数据做好备份的情况下，我们点击“确定”即可，等待几分钟后即可完成启动盘的制作</li><li>把下载好的系统文件复制到u盘里的ISO文件下。至此！这个u盘就可以拿来装系统了</li><li>关机，连续按快捷启动键，一般都是F12，不同笔记本可能有区别，可以根据自己电脑型号百度查询，进入快捷启动界面后，选择U盘对应的那项回车<br><img src="/assets/F12.png" alt=""></li><li>进入pe界面后，选择win8PE标准版，回车<br><img src="/assets/1.png" alt=""></li><li>进入pe系统后会弹出如下窗口,点击浏览，找到之前拷贝到u盘的系统文件确定<br><img src="/assets/2.png" alt=""></li><li>如图，选择专业版，再选择c盘，点击确认<br><img src="/assets/4.png" alt=""></li><li>后面的操作默认，点击确认即可，等待安装，大约十几分钟，系统安装完成后会自动重启，安装便完成</li></ol><h2 id="系统激活"><a href="#系统激活" class="headerlink" title="系统激活"></a>系统激活</h2><p>系统激活非常简单，这里我推荐一款非常好用的激活软件 《MicroKMS神龙版》 可以百度“亦是美网站” 里面有下载地址<br>下载后不需要安装，直接打开软件，点击激活windows10/8/7ALL就ok了， 激活时间只有180，到期再次激活即可<br><img src="/assets/12.png" alt=""></p><p>激活后你的系统就可以正常使用了，安装步骤很简单，几步就可以搞定！</p>]]></content>
    
    <summary type="html">
    
      bear自己安装系统的过程，希望对大家有帮助
    
    </summary>
    
    
      <category term="学习" scheme="http://bear01github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>中国国际智能产业博览会（智博会）</title>
    <link href="http://bear01github.io/2018/08/28/2018-8-24/"/>
    <id>http://bear01github.io/2018/08/28/2018-8-24/</id>
    <published>2018-08-28T11:30:53.000Z</published>
    <updated>2018-09-12T15:51:47.790Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>井底之蛙永远不知道外面的世界有多大    —–sir_bear</p></blockquote><p>首届智博会在重庆开幕，展会8月23-25日持续三天，后面又延后两天，阿里巴巴的马云、腾讯的马化腾、百度的李彦宏等来自社会各界的大咖、专家代表将齐聚山城，共飨智能科技盛宴。创新展区主要展示大数据、智能化领域前沿科技和科研成果，汇聚了国内外知名高校和科研院所。<a id="more"></a></p><p>展览第一天上午，我便随公司等一行人前去参观了这场盛宴,参观的人很多，老人，小孩，学生，上班族，男女老少，数不胜数，在周六那天，人数更是达到了极限，所以在交通方面，选择坐轻轨是一个明智的选择，虽然很挤，但是不会出现堵车的情况，不用担心没地方停车。（乘车路线：6号线-&gt;礼嘉-&gt;换乘国博线-&gt;国博中心）</p><p>凭借智博会SCE微信公众的注册报名二维码，进入了大厅，说真的，第一次见到如此规模的展览会，展厅非常大，展厅一共分为了13个展区，展馆总面积18万平方米，由于只有半天的时间，所以只参观了三分之一的展区（s2-s6），s2展区是企业展区，全国各大知名互联网企业在此展示着他们企业的智慧科技，智能产品等大数据智能化产业等相关成果，s2展区与我现在的专业息息相关，看到他们做的大数据分析项目，感受到了自己与这些企业的巨大差距；s3是创新展区，以科研院所和知名名校为主，包括中科院，清华大学，北京大学，重庆大学，还有我在读的重庆邮电大学，看到自己的学校在智博会的展区里，也是无比的自豪。该展区展示了各个学校研究的智能化科技成果，参观后，真是让人感叹不已；s4是大企业展区，以盼达汽车、格力电器、重庆金山科技、机器人产业联盟等企业为主，主要展示了智能装备与制造、智能机器人方面的最新科研成果。其中盼达汽车，我感触很深，因为在最近一年中，曾多次使用过盼达，盼达汽车体现出了智能化技术，的确为人民带来了很多帮助和方面了大家的出行；s5专题展区以汽车、物联网、等企业为主，展示了无人驾驶、汽车电子和解决方案等技术成果；s6展区为是智慧体验展馆，包括了阿里巴巴、腾讯、华为等国家顶级互联网企业，展示了国内最新最潮“黑科技”。作为半个行内人，这个展区也是我最想参观的展区之一，能够近距离的接触到这些顶级的黑科技，了解知名企业的技术成果，这是一个非常难得的机会，当然，这里面也有我为之奋斗的企业。其他展区由于时间问题，没有去参观，多少有点遗憾。</p><p>身为一个重庆人，能在重庆本地看到这么盛大的智能化产业博展会，还是很自豪，接触到了很多顶尖前沿科技，也接触到了国内外顶级企业和知名学校。方知道什么叫井底之蛙永远不知道外面的世界有多大。此次参观智博会，收获颇多，倒是涨了不少见识。</p><p><img src="/assets/5.JPG" alt=""></p>]]></content>
    
    <summary type="html">
    
      参观智博会的一些感想
    
    </summary>
    
    
      <category term="随笔" scheme="http://bear01github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>vue+vuex+es6前端笔记</title>
    <link href="http://bear01github.io/2018/08/01/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    <id>http://bear01github.io/2018/08/01/前端笔记/</id>
    <published>2018-08-01T11:30:53.000Z</published>
    <updated>2018-09-06T16:23:33.529Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>哲学家与疯子的区别在于：一个只是在想，一个真的去做了。————高铭《天才在左 疯子在右》</p></blockquote><h2 id="export-default"><a href="#export-default" class="headerlink" title="export default"></a>export default</h2><p>用于导出常量、函数、文件、模块等<br>在其它文件或模块中通过import+(常量 | 函数 | 文件 | 模块)名的方式，将其导入，以便能够对其进行使用<br>在一个文件或模块中，export、import可以有多个，export default仅有一个<br><a id="more"></a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import &#123;mapState, mapActions&#125; from <span class="string">'vuex'</span></span><br><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  name: <span class="string">' '</span>,</span><br><span class="line">  <span class="function"><span class="title">data</span></span> () &#123; </span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    ...mapState(<span class="string">'aboutManage'</span>, &#123;</span><br><span class="line">      aboutDetail: state =&gt; state.aboutDetail</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    ...mapActions(<span class="string">'aboutManage'</span>, [<span class="string">'getAboutDetailX'</span>]),</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h2><p>Actions<br>Actions也可以用于改变状态，不过是通过触发mutation实现的，重要的是可以包含异步操作。其辅助函数是mapActions与mapMutations类似，也是绑定在组件的methods上的。如果选择直接触发的话，使用this.$store.dispatch(actionName)方法。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import &#123;mapActions&#125; from <span class="string">'vuex'</span></span><br><span class="line"> </span><br><span class="line">//我是一个组件</span><br><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  methods: mapActions([</span><br><span class="line">    <span class="string">'actionName'</span>,</span><br><span class="line">  ])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Mutations：<br>Mutations的中文意思是“变化”，利用它可以更改状态，本质就是用来处理数据的函数，其接收唯一参数值state。store.commit(mutationName)是用来触发一个mutation的方法。需要记住的是，定义的mutation必须是同步函数，否则devtool中的数据将可能出现问题，使状态改变变得难以跟踪。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const mutations = &#123;</span><br><span class="line">  mutationName(state) &#123;</span><br><span class="line">    //在这里改变state中的数据</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在组件中触发：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//我是一个组件</span><br><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">handleClick</span></span>() &#123;</span><br><span class="line">      this.<span class="variable">$store</span>.commit(<span class="string">'mutationName'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>或者使用辅助函数mapMutations直接将触发函数映射到methods上，这样就能在元素事件绑定上直接使用了。如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import &#123;mapMutations&#125; from <span class="string">'vuex'</span></span><br><span class="line"> </span><br><span class="line">//我是一个组件</span><br><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  methods: mapMutations([</span><br><span class="line">    <span class="string">'mutationName'</span></span><br><span class="line">  ])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>State ：<br>负责存储整个应用的状态数据，一般需要在使用的时候在跟节点注入store对象，后期就可以使用this.$store.state直接获取状态后续在组件中使用的过程中，如果想要获取对应的状态你就可以直接使用this.$store.state获取，当然，也可以利用vuex提供的mapState辅助函数将state映射到计算属性中去，如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;mapState&#125; from <span class="string">'vuex'</span></span><br><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  computed: mapState(&#123;</span><br><span class="line">    count: state =&gt; state.count</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>这样直接就可以在组件中直接使用了</p><h2 id="vue中method，computed，watch有什么区别"><a href="#vue中method，computed，watch有什么区别" class="headerlink" title="vue中method，computed，watch有什么区别"></a>vue中method，computed，watch有什么区别</h2><p>通俗来讲，<br>computed是在HTML DOM加载后马上执行的，如赋值；<br>而methods则必须要有一定的触发条件才能执行，如点击事件；<br>watch呢？它用于观察Vue实例上的数据变动。对应一个对象，键是观察表达式，值是对应回调。值也可以是方法名，或者是对象，包含选项。<br>所以他们的执行顺序为：默认加载的时候先computed再watch，不执行methods；等触发某一事件后，则是：先methods再watch。</p>]]></content>
    
    <summary type="html">
    
      bear的个人博客，欢迎大家访问
    
    </summary>
    
    
      <category term="前端" scheme="http://bear01github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>今天星期日不上班</title>
    <link href="http://bear01github.io/2018/07/29/%E4%BB%8A%E5%A4%A9%E6%98%9F%E6%9C%9F7/"/>
    <id>http://bear01github.io/2018/07/29/今天星期7/</id>
    <published>2018-07-29T11:30:53.000Z</published>
    <updated>2018-09-06T16:22:24.535Z</updated>
    
    <content type="html"><![CDATA[<p>工作能使人专心到某一件事上，无所事事的时候就会胡思乱想，想未来、思情感、悟人生，其实更多的时候都是一些烦心事！</p><h3 id="随便写写"><a href="#随便写写" class="headerlink" title="随便写写"></a>随便写写</h3><p>终于有空闲的一天时间了，一周七天，前五天上班每天都是朝9晚9，本来这周六要加班，但是因为有辅导课要上，所以公司没有去，周六给考研学生上了一天的专业课，早上还差点睡过了，起来简单洗了个脸就打开电脑开始给学生上课，说实话，第一次给学生上课，而且是考研的学生上专业课，真的需要很大的勇气，每次上课的前一天晚上都要备课很久，就担心到时候没得讲，很尴尬。不过还好，除了第一次讲课有点紧张，讲的有点乱，后面几次上课自我感觉都还不错！</p><p><a id="more"></a>今天不上课，也不上班，早上本来定了个闹钟，结果还是睡到了12点，这一周真的很累，第一次觉得能睡到自然醒是件多么美好的事！！！ 下午看了部电影《船长哈洛克》，2014年的片子，挺不错。然后优化了一下自己的博客网站，不知不觉就六点了。闲来无事，逛了逛别人的博客，看见别人写的文章，突然有个个想法，除了学习做的一些相关笔记，我准备把生活中的点点滴滴都记录在博客上，在以后回过头来看看自己写的东西应该会有不一样的感受。</p><p><img src="/assets/img/7.29.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      bear的个人博客，欢迎大家访问
    
    </summary>
    
    
      <category term="记录生活" scheme="http://bear01github.io/tags/%E8%AE%B0%E5%BD%95%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>Vue学习笔记</title>
    <link href="http://bear01github.io/2018/07/25/Vue-blog/"/>
    <id>http://bear01github.io/2018/07/25/Vue-blog/</id>
    <published>2018-07-25T11:30:53.000Z</published>
    <updated>2018-09-06T16:24:19.207Z</updated>
    
    <content type="html"><![CDATA[<p>刚接触到vue，在学习Vue过程中记录的一些知识点，便于在后面学习过程中方便查询，后面有时间了在继续写了。忙的一批！！！</p><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><h3 id="trim"><a href="#trim" class="headerlink" title=".trim"></a>.trim</h3><p>如果要自动过滤用户输入的首尾空白字符，可以给 v-model 添加 trim 修饰符：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-model.trim=<span class="string">"msg"</span>&gt;</span><br></pre></td></tr></table></figure></p><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h3 id="组件复用的data"><a href="#组件复用的data" class="headerlink" title="组件复用的data"></a>组件复用的data</h3><p>一个组件的 data 选项必须是一个函数，因此每个实例可以维护一份被返回对象的独立的拷贝：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'button-counter'</span>, &#123;</span><br><span class="line">  data: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">      count: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  template: <span class="string">'&lt;button v-on:click="count++"&gt;You clicked me &#123;&#123; count &#125;&#125; times.&lt;/button&gt;'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;刚接触到vue，在学习Vue过程中记录的一些知识点，便于在后面学习过程中方便查询，后面有时间了在继续写了。忙的一批！！！&lt;/p&gt;
&lt;h2 id=&quot;修饰符&quot;&gt;&lt;a href=&quot;#修饰符&quot; class=&quot;headerlink&quot; title=&quot;修饰符&quot;&gt;&lt;/a&gt;修饰符&lt;/h2&gt;&lt;
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://bear01github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>三步完成文章上传</title>
    <link href="http://bear01github.io/2018/07/25/hello-world/"/>
    <id>http://bear01github.io/2018/07/25/hello-world/</id>
    <published>2018-07-25T10:30:53.000Z</published>
    <updated>2018-09-06T16:24:59.272Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://www.bear9596.club/" target="_blank" rel="noopener">bear个人网站</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using, you can find the answer in <a href="https://www.bear9596.club" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/bear01/bear01.github.io" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="如何上传文章"><a href="#如何上传文章" class="headerlink" title="如何上传文章"></a>如何上传文章</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      参观智博会的一些感想
    
    </summary>
    
    
      <category term="学习" scheme="http://bear01github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>My-First-Post</title>
    <link href="http://bear01github.io/2018/07/22/my-first-blog/"/>
    <id>http://bear01github.io/2018/07/22/my-first-blog/</id>
    <published>2018-07-22T11:30:53.000Z</published>
    <updated>2018-12-20T04:02:58.602Z</updated>
    
    <content type="html"><![CDATA[<p>第一次搭建自己的网站真的不容易啊，从github入手，然后慢慢的去了解如何搭建一个网站，学习使用git，学习hexo，中间遇到各种问题，摸索了好几天，才成功在github上部署了我的网站，说实话，还是学到了很多东西，对github和git有了大致的认识.后面我也会继续优化网站.</p><h2 id="新手上路"><a href="#新手上路" class="headerlink" title="新手上路"></a>新手上路</h2><h3 id="大家多多指教"><a href="#大家多多指教" class="headerlink" title="大家多多指教"></a>大家多多指教</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My-Ffirst-Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><blockquote><p>合抱之木,生于毫末;九层之台,起于垒土;千里之行,始于足下 —————《老子》</p></blockquote>]]></content>
    
    <summary type="html">
    
      bear的个人网站，欢迎大家访问
    
    </summary>
    
    
      <category term="随笔" scheme="http://bear01github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
